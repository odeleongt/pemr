% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/collect_data.r
\name{collect_data}
\alias{collect_data}
\title{Single function to call when extracting variables from each monitor.}
\usage{
collect_data(.data, type, data_col, ...)
}
\arguments{
\item{.data}{Dataframe containing a nested column with the data from each
file. Ussually a product of iterating `read_monitor` using `purrr::map2`.}

\item{type}{Type of monitor with which the data was recorded.}

\item{data_col}{Column containing the nested data.}

\item{...}{Additional columns present in `.data` to preserve in the output.
Useful to define the key to identify each data set.}
}
\value{
A data frame with `type`, specified key columns and collected
measures for `date_time`, `concentration` and `flow`.
}
\description{
When following the recommended use of \code{\link{read_monitor}}
(data frame listing files and types, iterate with `purrr::map2` to read),
the resulting object will include a list column containing onw data frame
with the data for each file (nested data).

`collect_data` processes the nested data and produces a data frame with all
observations of `date_time`, `concentration` and `flow` from all the read
files.

Additional columns should be included ad a key to identify the data from each
instrument in the resulting data frame.
}
\details{
Since some monitors can potentially produce files with record date/times
using different date formats (e.g. d/m/y, m/d/y, y/m/d) this function
tries to guess the correct format but can sometimes miss.
It is recommended to provide a reference date for each file so you can check
whether date/times were correctly interpreded.

There is no clear column in the UPAS files to extract the concentration data,
for now this functions returns `NA` for this concentration.
}
\examples{
\dontrun{
# Load required packages
library(package = "pemr")

# Define files and types. This can be any data frame, so composing data in a
# spreadsheet and reading it in works too
data_frame(
 files_col = c("path/to/file1.csv", "path/to/file2.csv"),
 types_col = c("ecm", "upas")
) \%>\%
mutate(
  data = map2(files_col, types_col, read_monitor)
) \%>\%
collect_data(
  type = types_col, data_col = data,
  files_col
)
}
}
